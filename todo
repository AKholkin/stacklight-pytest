TODO
----

* Implement Destructive actions context manager to prevent fail of other test on destructive actions ( High )
  - partially implemented
* Tag tests with "Fuel" or/and "TCPMK" labels to separate scopes for different systems   (  High  )
  - Auto-detection added in functional tests and marked in alarms tests
* Add to README cmdlines to run tests against both systems   (  Medium  )
* Split grafana dashboard test to per-dashboard tests  (  Medium  )
* Add grafana utils to analyze empty panels and generate fixtures (not pyTest fixtures, just support data) for tests  (  Medium  )
* Add to grafana tests fixtures processing to be possible to produce pass/fail result  (  Low  )
* Add flapping-detector for nagios/alarms tests   (  extraLow  )   Depends on:
  * Discover a way to prioritize cases run. E.g. flapping tests should be the first  (  extraLow  )
* Append Base clients and Api classes with logging (grafana, kibana, nagios APIs, OpenStack clients) (Medium)
* Add DVR vs Contrail env type parameter into config (Medium), fix in tests then:
  - dashboards smoke test(remove on dvr:['opencontrail', 'cassandra'])
* Write Neutron agents test (l3, dhcp, etc; see PROD-8584) (Low)
* Write Nova Aggregators' resources test (cpu, ram usage in zones; see PROD-8869) (Low)